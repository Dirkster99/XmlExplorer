<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MRULib</name>
    </assembly>
    <members>
        <member name="T:MRULib.Controls.BindingProxy">
            <summary>
            Implements an XAML proxy which can be used to bind items (TreeViewItem, ListViewItem etc)
            with a viewmodel that manages the collecrions.
            
            Source: http://www.thomaslevesque.com/2011/03/21/wpf-how-to-bind-to-data-when-the-datacontext-is-not-inherited/
             Issue: http://stackoverflow.com/questions/9994241/mvvm-binding-command-to-contextmenu-item
            </summary>
        </member>
        <member name="F:MRULib.Controls.BindingProxy.DataProperty">
             <summary>
             Backing storage of the Data dependency property.
            
             Gets/sets the data object this class is forwarding to everyone
             who has a reference to this object.
             </summary>
        </member>
        <member name="P:MRULib.Controls.BindingProxy.Data">
            <summary>
            Gets/sets the data object this class is forwarding to everyone
            who has a reference to this object.
            </summary>
        </member>
        <member name="M:MRULib.Controls.BindingProxy.CreateInstanceCore">
            <summary>
            Overrides of Freezable
            </summary>
            <returns></returns>
        </member>
        <member name="T:MRULib.Controls.PathTrimmingFileHyperlink">
            <summary>
            Interaction logic for PathTrimmingFileHyperlink.xaml
            </summary>
            <summary>
            PathTrimmingFileHyperlink
            </summary>
        </member>
        <member name="F:MRULib.Controls.PathTrimmingFileHyperlink.NavigateUriProperty">
            <summary>
            Relay NavigateUri dependency property to outside of PathTrimmingFileHyperlink Control.
            Use this dp if you can offer a Uri compliant string that represents the target destination.
            "file:///c:\\" or "https://mysite.com"
            
            !!! A standard string object "c:\\" is not suitable for binding to NavigateUri !!!
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.NavigateUriCommand">
            <summary>
            Gets or sets a command to associate with the PathTrimmingFileHyperlink.
            
            A command to associate with the System.Windows.Documents.Hyperlink. The default is null.
            </summary>
        </member>
        <member name="F:MRULib.Controls.PathTrimmingFileHyperlink.NavigateUriCommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for NavigateUriCommand.
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.NavigateUriCommandParameter">
            <summary>
            Gets or sets command parameters associated with the command specified by the
            PathTrimmingFileHyperlink.Command property.
            
            An object specifying parameters for the command specified by the System.Windows.Documents.Hyperlink.Command
            property. The default is null.
            </summary>
        </member>
        <member name="F:MRULib.Controls.PathTrimmingFileHyperlink.NavigateUriCommandParameterProperty">
            <summary>
            Using a DependencyProperty as the backing store for NavigateUriCommandParameter.
            </summary>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingFileHyperlink.#cctor">
            <summary>
            Static class constructor.
            </summary>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingFileHyperlink.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.CopyUri">
            <summary>
            Gets the CopyUri command of the <seealso cref="T:MRULib.Controls.PathTrimmingFileHyperlink"/> control.
            This command copies the current Uri (path) into the Windows clipboard.
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.NavigateToUri">
            <summary>
            Gets the NavigateUri command of the <seealso cref="T:MRULib.Controls.FileHyperlink"/> control.
            This command opens the file with the application that is associated in the Windows Explorer.
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.OpenContainingFolder">
            <summary>
            Gets the OpenContainingFolder command of the <seealso cref="T:MRULib.Controls.FileHyperlink"/> control.
            This command opens the requested folder in Windows Explorer.
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.NavigateUri">
            <summary>
            Declare NavigateUri property to allow a user who clicked
            on the dispalyed Hyperlink to navigate to it...
            
            Relay NavigateUri dependency property to outside of FileHyperlink Control.
            Use this dp if you can offer a Uri compliant string that represents the target destination.
            "file:///c:\\" or "https://mysite.com"
            
            !!! A standard string object "c:\\" is not suitable for binding to NavigateUri !!!
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.Text">
            <summary>
            Dependency property that denotes the text that is shown in the hyperlink
            (while NavigateUri denotes the linked destination).
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingFileHyperlink.TextDecorations">
            <summary>
            Gets/sets DependencyProperty for Hyperling TextDecorations (underline etc).
            </summary>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingFileHyperlink.OnApplyTemplate">
            <summary>
            Standard method that is executed when control template is applied.
            </summary>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingFileHyperlink.Hyperlink_CommandNavigateTo(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Process command when a hyperlink has been clicked.
            Start a web browser and let it browse to where this points to...
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingFileHyperlink.Hyperlink_RequestNavigate(System.Object,System.Windows.Navigation.RequestNavigateEventArgs)">
            <summary>
            A hyperlink has been clicked. Start a web browser and let it browse to where this points to...
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingFileHyperlink.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MRULib.Controls.FileHyperlink">
            <summary>
            Interaction logic for FileHyperlink.xaml
            </summary>
            <summary>
            FileHyperlink
            </summary>
        </member>
        <member name="F:MRULib.Controls.FileHyperlink.NavigateUriProperty">
            <summary>
            Relay NavigateUri dependency property to outside of FileHyperlink Control.
            Use this dp if you can offer a Uri compliant string that represents the target destination.
            "file:///c:\\" or "https://mysite.com"
            
            !!! A standard string object "c:\\" is not suitable for binding to NavigateUri !!!
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.NavigateUriCommand">
            <summary>
            Gets or sets a command to associate with the FileHyperlink.
            
            A command to associate with the System.Windows.Documents.Hyperlink. The default is null.
            </summary>
        </member>
        <member name="F:MRULib.Controls.FileHyperlink.NavigateUriCommandProperty">
            <summary>
            Using a DependencyProperty as the backing store for NavigateUriCommand.
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.NavigateUriCommandParameter">
            <summary>
            Gets or sets command parameters associated with the command specified by the
            FileHyperlink.Command property.
            
            An object specifying parameters for the command specified by the System.Windows.Documents.Hyperlink.Command
            property. The default is null.
            </summary>
        </member>
        <member name="F:MRULib.Controls.FileHyperlink.NavigateUriCommandParameterProperty">
            <summary>
            Using a DependencyProperty as the backing store for NavigateUriCommandParameter.
            </summary>
        </member>
        <member name="M:MRULib.Controls.FileHyperlink.#cctor">
            <summary>
            Static class constructor.
            </summary>
        </member>
        <member name="M:MRULib.Controls.FileHyperlink.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.CopyUri">
            <summary>
            Gets the CopyUri command of the <seealso cref="T:MRULib.Controls.FileHyperlink"/> control.
            This command copies the current Uri (path) into the Windows clipboard.
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.NavigateToUri">
            <summary>
            Gets the NavigateUri command of the <seealso cref="T:MRULib.Controls.FileHyperlink"/> control.
            This command opens the file with the application that is associated in the Windows Explorer.
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.OpenContainingFolder">
            <summary>
            Gets the OpenContainingFolder command of the <seealso cref="T:MRULib.Controls.FileHyperlink"/> control.
            This command opens the requested folder in Windows Explorer.
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.NavigateUri">
            <summary>
            Declare NavigateUri property to allow a user who clicked
            on the dispalyed Hyperlink to navigate to it...
            
            Relay NavigateUri dependency property to outside of FileHyperlink Control.
            Use this dp if you can offer a Uri compliant string that represents the target destination.
            "file:///c:\\" or "https://mysite.com"
            
            !!! A standard string object "c:\\" is not suitable for binding to NavigateUri !!!
            </summary>
        </member>
        <member name="P:MRULib.Controls.FileHyperlink.Text">
            <summary>
            Dependency property that denotes the text that is shown in the hyperlink
            (while NavigateUri denotes the linked destination).
            </summary>
        </member>
        <member name="M:MRULib.Controls.FileHyperlink.OnApplyTemplate">
            <summary>
            Standard method that is executed when control template is applied.
            </summary>
        </member>
        <member name="M:MRULib.Controls.FileHyperlink.Hyperlink_CommandNavigateTo(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Process command when a hyperlink has been clicked.
            Start a web browser and let it browse to where this points to...
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.FileHyperlink.Hyperlink_RequestNavigate(System.Object,System.Windows.Navigation.RequestNavigateEventArgs)">
            <summary>
            A hyperlink has been clicked. Start a web browser and let it browse to where this points to...
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.FileHyperlink.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:MRULib.Controls.Extensions.FormatWith(System.String,System.Object[])">
            <summary>
            Extend the string constructor with a string.Format like syntax.
            </summary>
            <param name="s"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.Controls.PathTrimmingTextBlock">
            <summary>
            This PathTrimmingTextBlock textblock attaches itself to the events of a parent container and
            displays a trimmed path text when the size of the parent (container) is changed.
            
            http://www.codeproject.com/Tips/467054/WPF-PathTrimmingTextBlock
            
            Make sure you set, if you use this within an ListBox or ListView:
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
            </summary>
        </member>
        <member name="F:MRULib.Controls.PathTrimmingTextBlock.PathProperty">
            <summary>
            Path dependency property that stores the trimmed path
            </summary>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingTextBlock.#ctor">
            <summary>
            Class Constructor
            </summary>
        </member>
        <member name="P:MRULib.Controls.PathTrimmingTextBlock.Path">
            <summary>
            Path dependency property that stores the trimmed path
            </summary>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingTextBlock.PathTrimmingTextBlock_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Textblock is constructed and start its live - lets attach to the
            size changed event handler of the containing parent.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingTextBlock.PathTrimmingTextBlock_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Remove custom event handlers and clean-up on unload.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingTextBlock.container_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Trim the containing text (path) accordingly whenever the parent container chnages its size.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.Controls.PathTrimmingTextBlock.GetTrimmedPath(System.Double)">
            <summary>
            Compute the text to display (with ellipsis) that fits the ActualWidth of the container
            </summary>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.Controls.CheckPin">
            <summary>
            A CheckPin is inheritat from a <seealso cref="T:System.Windows.Controls.CheckBox"/> in order to use
            a custom ui (XAML) definition and a slightly extended MouseOver behaviour.
            
            The control shows a faint unpinned pin on:
            - MouseOver or
            - on MouseOver on the control bound to IsMouseOverListViewItem - use someting
              like the following XAML in the ControlTemplate of the hosting control:
              
             &lt;ControlTemplate.Triggers>
               &lt;Trigger Property = "IsMouseOver" Value="True" >
                 &lt;Setter TargetName = "checkPin"  Property="IsMouseOverListViewItem" Value="True" />
               &lt;/Trigger>
             &lt;/ControlTemplate.Triggers>
            </summary>
        </member>
        <member name="M:MRULib.Controls.CheckPin.#cctor">
            <summary>
            Static Class constructor
            </summary>
        </member>
        <member name="P:MRULib.Controls.CheckPin.IsMouseOverListViewItem">
            <summary>
            Bind this dependeny property to the item where the pin is placed into (eg. ListViewItem).
            The CheckPin ControlTemplate Trigger is setup to show a faint pin to inform the user via
            mouseover that this list is actually pinnable.
            </summary>
        </member>
        <member name="T:MRULib.Converters.BoolToVisibilityConverter">
            <summary>
            Source: http://stackoverflow.com/questions/534575/how-do-i-invert-booleantovisibilityconverter
            
            Implements a Boolean to Visibility converter
            Use ConverterParameter=true to negate the visibility - boolean interpretation.
            </summary>
        </member>
        <member name="M:MRULib.Converters.BoolToVisibilityConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an object that is provided
            as the value of the target property for this markup extension.
            
            When a XAML processor processes a type node and member value that is a markup extension,
            it invokes the ProvideValue method of that markup extension and writes the result into the
            object graph or serialization stream. The XAML object writer passes service context to each
            such implementation through the serviceProvider parameter.
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.Converters.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <seealso cref="T:System.Boolean"/> value
            into a <seealso cref="T:System.Windows.Visibility"/> value.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.Converters.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <seealso cref="T:System.Windows.Visibility"/> value
            into a <seealso cref="T:System.Boolean"/> value.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.Converters.IntIsPinnedToVisibilityConverter">
            <summary>
            Source: http://stackoverflow.com/questions/534575/how-do-i-invert-booleantovisibilityconverter
            
            Implements a Boolean to Visibility converter
            Use ConverterParameter=true to negate the visibility - boolean interpretation.
            </summary>
        </member>
        <member name="M:MRULib.Converters.IntIsPinnedToVisibilityConverter.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="P:MRULib.Converters.IntIsPinnedToVisibilityConverter.ConvertZeroToVisible">
            <summary>
            Gets/sets a property that determines whether the integer value 0
            results in a value of <seealso cref="M:System.Windows.Visibility.#ctor"/> or not.
            
            This converter will either convert:
            1) int == 0 to <seealso cref="M:System.Windows.Visibility.#ctor"/> and all other values
               int != 0 to <seealso cref="F:System.Windows.Visibility.Collapsed"/>
               
            or
            
            2) int != 0 to <seealso cref="M:System.Windows.Visibility.#ctor"/> and all other values
               int == 0 to <seealso cref="F:System.Windows.Visibility.Collapsed"/>
            </summary>
        </member>
        <member name="M:MRULib.Converters.IntIsPinnedToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <seealso cref="T:System.Boolean"/> value
            into a <seealso cref="T:System.Windows.Visibility"/> value based on
            the <seealso cref="P:MRULib.Converters.IntIsPinnedToVisibilityConverter.ConvertZeroToVisible"/> property.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.Converters.IntIsPinnedToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back is not supported.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.Converters.IntToBoolConverter">
            <summary>
            XAML mark up extension to convert a null value into a visibility value.
            </summary>
        </member>
        <member name="M:MRULib.Converters.IntToBoolConverter.#ctor">
            <summary>
            Standard Constructor
            </summary>
        </member>
        <member name="M:MRULib.Converters.IntToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Int to bool conversion method returns false if int value in <paramref name="value"/>
            is zero, otherwse false.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.Converters.IntToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Visibility to Zero conversion method (is disabled and will throw an exception when invoked)
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.Converters.ZeroToVisibilityConverter">
            <summary>
            XAML mark up extension to convert a null value into a visibility value.
            </summary>
        </member>
        <member name="M:MRULib.Converters.ZeroToVisibilityConverter.#ctor">
            <summary>
            Standard Constructor
            </summary>
        </member>
        <member name="M:MRULib.Converters.ZeroToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Zero to visibility conversion method
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.Converters.ZeroToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Visibility to Zero conversion method (is disabled and will throw an exception when invoked)
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.MRU.Enums.MoveMRUItem">
            <summary>
            Enumerates elements that indicate a particular direction or
            place where an MRU item is to be moved/placed in the list.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.MoveMRUItem.Up">
            <summary>
            Moves the MRU item up by 1 spot in the list.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.MoveMRUItem.Down">
            <summary>
            Moves the MRU item down by 1 spot in the list.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Enums.GroupType">
            <summary>
            Enum is used to Group a file reference into a time span group.
            The integer value assigned to each member controls the sort order in the display.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.IsPinned">
            <summary>
            Items is pinned (bookmarked) to the top of the list.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.Today">
            <summary>
            The last acces to this item was today.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.Yesterday">
            <summary>
            The last acces to this item was yesterday.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.ThisWeek">
            <summary>
            The last acces to this item is within this week.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.LastWeek">
            <summary>
            The last acces to this item is within last month.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.ThisMonth">
            <summary>
            The last acces to this item is within this month.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.LastMonth">
            <summary>
            The last acces to this item is with last month.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Enums.GroupType.Older">
            <summary>
            The last acces to this item is older than last month.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Models.Persist.MRUEntry">
            <summary>
            Implements a pojo class for saving/loading data to/from XML.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntry.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntry.#ctor(System.String,System.Int32,System.DateTime)">
            <summary>
            Parameterized class constructor
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.Persist.MRUEntry.PathFileName">
            <summary>
            Gets/set path and filename of referenced file.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.Persist.MRUEntry.IsPinned">
            <summary>
            Gets/set whether the file reference is pinned or not.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.Persist.MRUEntry.LastUpdate">
            <summary>
            Gets/set the time of the last update for this file reference.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Models.Persist.MRUEntrySerializer">
            <summary>
            Implements methods to saves/load an entire MRU list to/from XML.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntrySerializer.ConvertToModel(MRULib.MRU.Interfaces.IMRUListViewModel,MRULib.MRU.Models.Persist.MRUList)">
            <summary>
            Converts an MRU ViewModel into an equivalent model.
            </summary>
            <param name="VM"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntrySerializer.ConvertToViewModel(MRULib.MRU.Models.Persist.MRUList,MRULib.MRU.Interfaces.IMRUListViewModel)">
            <summary>
            Converts an MRU model into an equivalent ViewModel.
            </summary>
            <param name="model"></param>
            <param name="VM"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntrySerializer.SaveAsync(System.String,MRULib.MRU.Interfaces.IMRUListViewModel)">
            <summary>
            Save MRU list to XML file in an awaitable fashion.
            </summary>
            <param name="path"></param>
            <param name="VM"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntrySerializer.Save(System.String,MRULib.MRU.Interfaces.IMRUListViewModel)">
            <summary>
            Save MRU list to XML file.
            </summary>
            <param name="path"></param>
            <param name="VM"></param>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntrySerializer.LoadAsync(System.String)">
            <summary>
            Load MRU list from XML file in an awaitable fashion.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUEntrySerializer.Load(System.String)">
            <summary>
            Load MRU list to XML file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:MRULib.MRU.Models.Persist.MRUList">
            <summary>
            Implements a pojo class for saving/loading listed data to/from XML.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.MRUList.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.Persist.MRUList.MaxMruEntryCount">
            <summary>
            Gets/sets the maximum number of entries hosted in the list.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.Persist.MRUList.ListOfMRUEntries">
            <summary>
            Gets/sets the lsit of MRU entries.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Models.Persist.XmlSerializerUtil">
            <summary>
            Source: https://codeoverload.wordpress.com/2010/07/30/c-object-persistence-with-xml/
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.Load``1(System.String)">
            <summary>
            Loads an XML file for a specified class type <typeparamref name="T"/>
            from the file system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.LoadAsync``1(System.String)">
            <summary>
            Returns a task that loads an XML file for a specified class
            type <typeparamref name="T"/>
            from the file system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.LoadFromString``1(System.String)">
            <summary>
            Loads an XML file for a specified class type <typeparamref name="T"/>
            from an in memory <seealso cref="T:System.IO.StringReader"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.LoadFromStringAsync``1(System.String)">
            <summary>
            Returns a task that Loads an XML file for a specified class type
            <typeparamref name="T"/> from an in memory <seealso cref="T:System.IO.StringReader"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.Save``1(System.String,``0)">
            <summary>
            Persists an XML file for a specified class type <typeparamref name="T"/>
            to the file system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.SaveAsync``1(System.String,``0)">
            <summary>
            Returns a task that persists an XML file for a specified
            class type <typeparamref name="T"/>
            to the file system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MRULib.MRU.Models.Persist.XmlSerializerUtil.SaveToString``1(``0)">
            <summary>
            Persists an XML file for a specified class type <typeparamref name="T"/>
            to an in-memory string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:MRULib.MRU.Models.GroupTimeSpanModel.Group">
            <summary>
            Gets the <see cref="T:MRULib.MRU.Enums.GroupType"/> for this period of time.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.GroupTimeSpanModel.MinTime">
            <summary>
            Gets the minimum time that is considered to belong to this timespan.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.GroupTimeSpanModel.MaxTime">
            <summary>
            Gets the maximum time that is considered to belong to this timespan.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Models.TimeSpanModelList">
            <summary>
            List all time span max and min values between now and older.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.TimeSpanModelList.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.TimeSpanModelList.List">
            <summary>
            Gets a list of min max time spans relevant for each enumerated group.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Models.FileSystemCommands">
            <summary>
            Class implements base services for opening and working with folders and files in Windows.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.FileSystemCommands.OpenContainingFolder(System.String)">
            <summary>
            Convinience method to open Windows Explorer with a selected file (if it exists).
            Otherwise, Windows Explorer is opened in the location where the file should be at.
            Returns falsem if neither file nor given directory exist.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.FileSystemCommands.OpenInWindows(System.String)">
            <summary>
            Opens a file with the current Windows default application.
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="M:MRULib.MRU.Models.FileSystemCommands.CopyPath(System.String)">
            <summary>
            Copies the given string into the Windows clipboard.
            </summary>
            <param name="sFileName"></param>
        </member>
        <member name="T:MRULib.MRU.Models.FSItemType">
            <summary>
            Determine whether a file system item is a folder or a file.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Models.FSItemType.Unknown">
            <summary>
            Uknown type of file system item.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Models.FSItemType.LogicalDrive">
            <summary>
            Reference to harddisk or other drives such as 'C:\'
            </summary>
        </member>
        <member name="F:MRULib.MRU.Models.FSItemType.Folder">
            <summary>
            File system item is a folder.
            </summary>
        </member>
        <member name="F:MRULib.MRU.Models.FSItemType.File">
            <summary>
            File system item is a file.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Models.PathModel">
            <summary>
            Class implements basic properties and behaviours
            of elements related to a path. Such elements are,
            virtual folders, drives, network drives, folder, files, and shortcuts.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.#ctor(System.String,MRULib.MRU.Models.FSItemType)">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.#ctor(MRULib.MRU.Models.PathModel)">
            <summary>
            Copy Constructor
            </summary>
            <param name="pathModelCopy"></param>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.PathModel.Path">
            <summary>
            Gets the path of this <seealso cref="T:MRULib.MRU.Models.PathModel"/> object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.PathModel.PathType">
            <summary>
            Gets the type of item of this <seealso cref="T:MRULib.MRU.Models.PathModel"/> object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Models.PathModel.Name">
            <summary>
            Gets the name of this item. For folders this is the folder
            name without its path;
            </summary>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.Compare(MRULib.MRU.Models.PathModel,MRULib.MRU.Models.PathModel)">
            <summary>
            Compare the paths for 2 <see cref="T:MRULib.MRU.Models.PathModel"/> objects
            and return false if they are not equal, otherwise true.
            </summary>
            <param name="m"></param>
            <param name="m1"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.Compare(System.String,System.String)">
            <summary>
            Compare 2 <see cref="T:System.String"/> objects that represent a path
            and returns false if they are equal.
            </summary>
            <param name="path"></param>
            <param name="path1"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.CheckValidString(System.String)">
            <summary>
            Check whether a string has basic properties that
            (not null, at least 2 characters) it could contain
            a path reference.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.NormalizePath(System.String)">
            <summary>
            Make sure that a path reference does actually work with
            <see cref="T:System.IO.DirectoryInfo"/> by replacing 'C:' by 'C:\'.
            </summary>
            <param name="dirOrFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.NormalizeDirectoryPath(System.String)">
            <summary>
            Normalizes the input string string into a standard (output) notation.
            
            Mormalization refers to using backslashes at the end of all directory
            path references: 'C:' -> 'C:\' or 'C:\' or 'C:\Temp\'
            </summary>
            <param name="dirPath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.ExtractDirectoryRoot(System.String)">
            <summary>
            Returns a normalized directory reference from a path reference
            or the parent directory path if the <paramref name="dirPath"/>
            reference points to a file.
            </summary>
            <param name="dirPath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.DirectoryPathExists(System.String)">
            <summary>
            Determine whether a given path is an exeisting directory or not.
            </summary>
            <param name="path"></param>
            <returns>true if this directory exists and otherwise false</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.GetDirectories(System.String)">
            <summary>
            Split the current folder in an array of sub-folder names and return it.
            </summary>
            <returns>Returns a string array of su-folder names (including drive) or null if there are no sub-folders.</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.SpecialFolderHasPath(System.Environment.SpecialFolder)">
            <summary>
            Determine whether a special folder has physical information on current computer or not.
            </summary>
            <param name="specialFolder"></param>
            <returns>Path to special folder (if any) or null</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.DirectoryPathExists">
            <summary>
            Determine whether a given path is an exeisting directory or not.
            </summary>
            <returns>true if this directory exists and otherwise false</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.DirectoryPathExistsAsync">
            <summary>
            Async version to determine whether a given path is an exeisting directory or not.
            </summary>
            <returns>true if this directory exists and otherwise false</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.RenameFileOrDirectory(MRULib.MRU.Models.PathModel,System.String,MRULib.MRU.Models.PathModel@)">
            <summary>
            Rename an existing directory into the <paramref name="newFolderName"/>.
            </summary>
            <param name="source"></param>
            <param name="newFolderName"></param>
            <param name="newFolderPathName"></param>
            <returns>false Item to be renamed does not exist or something else is not as expected, otherwise true</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.CreateDir(MRULib.MRU.Models.PathModel,System.String)">
            <summary>
            Create a new folder new standard sub folder in <paramref name="folderPath"/>.
            The new folder has a standard name like 'New folder n'.
            </summary>
            <param name="folderPath"></param>
            <param name="newDefaultFolderName">Compute default name for new folder</param>
            <returns>PathModel object to new folder or null</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.Equals(System.Object,System.Object)">
            <summary>
            Determine whether two <seealso cref="T:MRULib.MRU.Models.PathModel"/> objects describe the same
            location/item in the file system or not.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.GetHashCode(System.Object)">
            <summary>
            Serves as the default hash function.
            </summary>
            <param name="obj"></param>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.CompareTo(System.Object)">
             <summary>
                 Compares the current instance with another object of the same type and returns
                 an integer that indicates whether the current instance precedes, follows, or
                 occurs in the same position in the sort order as the other object.
             </summary>
             <param name="obj">An object to compare with this instance.</param>
             <returns>
             A value that indicates the relative order of the objects being compared. The
             return value has these meanings: Value Meaning Less than zero This instance precedes
             obj in the sort order. Zero This instance occurs in the same position in the
             sort order as obj. Greater than zero This instance follows obj in the sort order.
            
             Exceptions:
               T:System.ArgumentException:
                 obj is not the same type as this instance.
             </returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.CompareTo(MRULib.MRU.Models.PathModel)">
            <summary>
            Determine whether two <seealso cref="T:MRULib.MRU.Models.PathModel"/> objects describe the same
            location/item in the file system or not.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.Equals(MRULib.MRU.Models.PathModel)">
            <summary>
            Determine whether two <seealso cref="T:MRULib.MRU.Models.PathModel"/> objects describe the same
            location/item in the file system or not.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.Clone">
            <summary>
            Get a copy of this <seealso cref="T:MRULib.MRU.Models.PathModel"/> object via the clone interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.Equals(MRULib.MRU.Models.PathModel,MRULib.MRU.Models.PathModel)">
            <summary>
            Determine whether two <seealso cref="T:MRULib.MRU.Models.PathModel"/> objects describe the same
            location/item in the file system or not.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Models.PathModel.GetHashCode(MRULib.MRU.Models.PathModel)">
            <summary>
            Serves as the default hash function.
            </summary>
            <param name="obj"></param>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:MRULib.MRU.Interfaces.IMRUListViewModel">
            <summary>
            Implements a viewmodel that can be used to list all recently used files.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUListViewModel.MaxMruEntryCount">
            <summary>
            Gets/sets the maximum number of MRU file entries.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUListViewModel.Entries">
            <summary>
            Gets the items collection of MRU File Entries.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUListViewModel.ItemIsPinnedChanged">
            <summary>
            Gets a command that will invert the IsPinned property of an
            instance of <seealso cref="T:MRULib.MRU.Interfaces.IMRUEntryViewModel"/>.
            
            CommandParameter:
            The key for the value/key pair is expected to be supplied as
            string parameter of the command.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.PinUnpinEntry(System.Boolean,MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Sets the pinning entry mode for this filenamepath entry.
            </summary>
            <param name="isPinned"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.PinUnpinEntry(System.Boolean,System.String)">
            <summary>
            Sets the pinning entry mode for this filenamepath entry.
            </summary>
            <param name="isPinned"></param>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.UpdateEntry(System.String)">
            <summary>
            Method either adds an entry if the given path was not available until now
            (with defaults for isPinned=false, LastUpdate = <seealso cref="P:System.DateTime.Now"/>)
            or
            property: LastUpdate = <seealso cref="P:System.DateTime.Now"/> is updated only.
            </summary>
            <param name="filepath"></param>
            <returns>true if update or insert was performd, false otherwise.</returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.UpdateEntry(System.String,System.Boolean,System.Boolean)">
            <summary>
            Method adds an entry if the given path was not available until now.
            Otherwise, elements properties (IsPinned) are updated only.
            </summary>
            <param name="filepath"></param>
            <param name="isPinned"></param>
            <param name="bUpdate"></param>
            <returns>true if update or insert was performd, false otherwise.</returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.UpdateEntry(MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Method adds an entry if the given path was not available until now.
            Otherwise, elements properties (IsPinned) are updated only.
            </summary>
            <param name="mruEntry"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.Clear">
            <summary>
            Removes all items in the collection.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.RemoveEntry(MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Remove any entry (whether its pinned or not) based on a viewmodel item.
            </summary>
            <param name="mruEntry"></param>
            <returns>true if item was succesfully removed, otherwise false.</returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.RemoveEntry(System.String)">
            <summary>
            Removes all items that can be identified with this key.
            </summary>
            <param name="key"></param>
            <returns>true if item was succesfully removed, otherwise false.</returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.RemoveEntry(MRULib.MRU.Enums.GroupType)">
            <summary>
            Removes all items in the collection belongong to this group.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.RemoveEntry(System.DateTime)">
            <summary>
            Removes all items that or older than the given <see cref="T:System.DateTime"/> value.
            Items with IsPinned = True are not removed.
            </summary>
            <param name="removeOlderThanThis"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.RemoveEntryOlderThanThis(MRULib.MRU.Enums.GroupType)">
            <summary>
            <paramref name="group"/> param != IsPinned:
            Removes all items that or older than the <paramref name="group"/>.
            Items with IsPinned = True are not removed.
            
            <paramref name="group"/> param == IsPinned:
            Removes all items that are not pinned.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.RemovePinnedEntries(System.Boolean)">
            <summary>
            Removes all items that pinned or all items that are not pinned
            depending on the value in <paramref name="isPinned"/>.
            </summary>
            <param name="isPinned">All pinned items are removed, if this is true.
            Otherwise, all items not pinned are removed</param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.FindEntry(System.String)">
            <summary>
            Finds an MRU entry by the file reference an returns it or null.
            
            Throws a <seealso cref="T:System.NotSupportedException"/> if parameter is empty or null.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.FindEntries(MRULib.MRU.Enums.GroupType)">
            <summary>
            Finds all items in the collection belongong to this <paramref name="groupType"/>.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.MovePinnedEntry(MRULib.MRU.Enums.MoveMRUItem,MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Moves a pinned MRU Entry up/down in the group of pinned items.
            </summary>
            <param name="direction"></param>
            <param name="param"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUListViewModel.ResetMaxMruEntryCount(System.Int32)">
            <summary>
            Sets the maximum number of MRU file entries. The oldest file reference entries are
            removed if there are more entries being added than what is allowed here.
            </summary>
        </member>
        <member name="T:MRULib.MRU.Interfaces.IMRUEntryViewModel">
            <summary>
            Defines an interface to a viewmodel entry that can be
            used to list all recently used files.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.File">
            <summary>
            Gets the pathmodel stored in this viewmodel.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.PathFileName">
            <summary>
            Gets the path and file name of the referenced file.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.PathfileNameUri">
            <summary>
            Gets the path and file name of the referenced file in a Uri
            object using the file:/// Uri syntax convention.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.IsPinned">
            <summary>
            Gets the fact whether this item is currently pinned in the list or not.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.LastUpdate">
            <summary>
            Gets the path and file name of the referenced file.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.GroupItem">
            <summary>
            Gets the Group (today, yesterday, etc.) for the current LastUpdate
            with reference to <see cref="P:System.DateTime.Now"/> or IsPinned if IsPinned is true.
            </summary>
        </member>
        <member name="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.DisplayPathFileName">
            <summary>
            Gets a shortend path (with ellipses if necessary) for output in UI components.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUEntryViewModel.UpdateGroup">
            <summary>
            Method updates the <see cref="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.GroupItem"/> property with regard to the
            gap between the current system time and the time stored in
            <see cref="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.LastUpdate"/> property.
            </summary>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUEntryViewModel.SetIsPinned(System.Int32)">
            <summary>
            Sets the <see cref="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.IsPinned"/> property to true or false.
            </summary>
            <param name="isPinned"></param>
        </member>
        <member name="M:MRULib.MRU.Interfaces.IMRUEntryViewModel.SetLastUpdate(System.DateTime)">
            <summary>
            Sets the <see cref="P:MRULib.MRU.Interfaces.IMRUEntryViewModel.LastUpdate"/> property to the specified value.
            </summary>
            <param name="lastUpdate"></param>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Base.RelayCommand`1">
            <summary>
            A class whose sole purpose is to  relay its functionality to other
            objects by invoking delegates.
            
            The default return value for the CanExecute method is 'true'.
            
            Source: http://www.codeproject.com/Articles/31837/Creating-an-Internationalized-Wizard-in-WPF
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Base.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Class constructor
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Base.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Base.RelayCommand`1.CanExecuteChanged">
            <summary>
            Eventhandler to re-evaluate whether this command can execute or not
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Base.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determine whether this pre-requisites to execute this command are given or not.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Base.RelayCommand`1.Execute(System.Object)">
            <summary>
            Execute the command method managed in this class.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Base.BaseViewModel">
            <summary>
            Every ViewModel class is required to implement the INotifyPropertyChanged
            interface in order to tell WPF when a property changed (for instance, when
            a method or setter is executed).
            
            Therefore, the PropertyChanged methode has to be called when data changes,
            because the relevant properties may or may not be bound to GUI elements,
            which in turn have to refresh their display.
            
            The PropertyChanged method is to be called by the members and properties of
            the class that derives from this class. Each call contains the name of the
            property that has to be refreshed.
            
            The BaseViewModel is derived from from System.Windows.DependencyObject to allow
            resulting ViewModels the implemantion of dependency properties. Dependency properties
            in turn are useful when working with IValueConverter and ConverterParameters.
            </summary>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Base.BaseViewModel.PropertyChanged">
            <summary>
            Standard event handler of the <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Base.BaseViewModel.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display.
            
            Sample call: this.NotifyPropertyChanged(() => this.IsSelected);
            where 'this' is derived from <seealso cref="T:MRULib.MRU.ViewModels.Base.BaseViewModel"/>
            and IsSelected is a property.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Base.BaseViewModel.OnPropertyChanged(System.String)">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display.
            
            Sample call: this.OnPropertyChanged("IsSelected");
            where 'this' is derived from <seealso cref="T:MRULib.MRU.ViewModels.Base.BaseViewModel"/>
            and IsSelected is a property.
            </summary>
            <param name="propertyName">Name of property to refresh</param>
        </member>
        <member name="T:MRULib.MRU.ViewModels.GroupViewModel">
            <summary>
            Implements a viewmodel that descripes a group though an enumerated (keyed)
            value and a corresponding string value for output in UI bindings.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.GroupViewModel.#ctor(MRULib.MRU.Enums.GroupType)">
            <summary>
            class constructor
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.GroupViewModel.#ctor">
            <summary>
            class constructor
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.GroupViewModel.GroupName">
            <summary>
            Gets the group string for display in UI in dependence
            of the current group key (enumerated value).
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.GroupViewModel.Group">
            <summary>
            Gets the current Group (today, yesterday, etc.).
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.GroupViewModel.SetGroup(MRULib.MRU.Enums.GroupType)">
            <summary>
            Sets the group enumeration key for this group object.
            The corresponding name will update automatically.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.GroupViewModel.Equals(System.Object)">
            <summary>
            Determines whether this object equals the other object or not.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.GroupViewModel.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2">
            <summary>
            Source: https://github.com/gayaK/Gayak.ObservableDictionary
            </summary>
            <summary>
            Source: https://github.com/gayaK/Gayak.ObservableDictionary
            
            Implements the <seealso cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator"/> class
            in the <seealso cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2"/> class.
            </summary>
            <summary>
            Source: https://github.com/gayaK/Gayak.ObservableDictionary
            
            Implements the <seealso cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection"/> class inside
            the <seealso cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2"/> class.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <summary>
            Source: https://github.com/gayaK/Gayak.ObservableDictionary
            
            Implements the internal <seealso cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection"/> class of the
            <seealso cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.#ctor">
            <summary>
            Class Constructor
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Class Constructor with comparer parameter.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Copy Class Constructor.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Copy Class Constructor with comparer parameter.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            
            Exceptions:
              T:System.ArgumentNullException:
                key is null.
            
              T:System.Collections.Generic.KeyNotFoundException:
                The property is retrieved and key is not found.
            
              T:System.NotSupportedException:
                The property is set and the System.Collections.Generic.IDictionary`2 is read-only.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            
            Exceptions:
              T:System.ArgumentNullException:
                key is null.
            
              T:System.Collections.Generic.KeyNotFoundException:
                The property is retrieved and key is not found.
            
              T:System.NotSupportedException:
                The property is set and the System.Collections.Generic.IDictionary`2 is read-only.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.Keys">
            <summary>
            Gets a collection of keys stored in this object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection of keys stored in this object.
            
            Implements the <seealso cref="T:System.Collections.Generic.ICollection`1"/> interface member.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Gets a collection of keys stored in this object.
            
            implements ths <seealso cref="T:System.Collections.Generic.IEnumerable`1"/> interface member.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets a collection of keys stored in this object.
            
            Implements the <seealso cref="T:System.Collections.ICollection"/> interface member.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.Values">
            <summary>
            Gets a collection of values stored in this object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection of keys stored in this object.
            
            Implements the <seealso cref="T:System.Collections.Generic.ICollection`1"/> interface member.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Gets a collection of keys stored in this object.
            
            Implements the <seealso cref="T:System.Collections.Generic.IEnumerable`1"/> interface member.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets a collection of keys stored in this object.
            
            Implements the <seealso cref="T:System.Collections.ICollection"/> interface member.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <seealso cref="T:System.Collections.IDictionary"/> has a fixed size.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether objects in the <seealso cref="T:System.Collections.IDictionary"/>
            can only be read or also be edit.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.GetKeyForItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Extracts the key from the specified element.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an object to the end of the <seealso cref="T:System.Collections.ObjectModel.Collection`1"/>.
            (Inherited from <seealso cref="T:System.Collections.ObjectModel.Collection`1"/>.)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an object to the end of the <seealso cref="T:System.Collections.IDictionary"/>.
            (Inherited from <seealso cref="T:System.Collections.IDictionary"/>.)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <seealso cref="T:System.Collections.Generic.IDictionary`2"/> collection.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            (Implements the <seealso cref="T:System.Collections.IDictionary"/> memeber).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>true if the <seealso cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with
            the specified key; otherwise, false.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.TryGetValueInternal(`0,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Gets the <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/> associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/>
            associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>true if the <seealso cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with
            the specified key; otherwise, false.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <seealso cref="T:System.Collections.Generic.IDictionary`2"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator">
            <summary>
            Enumerates the elements of a nongeneric dictionary with an
            <seealso cref="T:System.IDisposable"/> implementation.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Class constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            
            Returns: The key of the current element of the enumeration.
            
            Exceptions:
              T:System.InvalidOperationException:
                The System.Collections.IDictionaryEnumerator is positioned before the first entry
                of the dictionary or after the last entry.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            
            Returns: The value of the current element of the enumeration.
            
            Exceptions:
              T:System.InvalidOperationException:
                The System.Collections.IDictionaryEnumerator is positioned before the first entry
                of the dictionary or after the last entry.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            
            Returns:
            A System.Collections.DictionaryEntry containing both the key and the value of
            the current dictionary entry.
            
            Exceptions:
              T:System.InvalidOperationException:
                The System.Collections.IDictionaryEnumerator is positioned before the first entry
                of the dictionary or after the last entry.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Current">
            <summary>
            Gets the current <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/> in the collection.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.MoveNext">
            <summary>
            Moves to the next current <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/> in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Reset">
            <summary>
                Sets the enumerator to its initial position, which is before the first element
                in the collection.
            
            Exceptions:
              T:System.InvalidOperationException:
                The collection was modified after the enumerator was created.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Dispose(System.Boolean)">
            <summary>
            Standard internal dispose method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.DictionaryEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection">
            <summary>
            Manages a collection of keys.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.#ctor(MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary{`0,`1})">
            <summary>
            Class constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.Item(System.Int32)">
            <summary>
            Gets the key item for a given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the count of items currently stored in this collection.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.IsReadOnly">
            <summary>
            Gets whether the collection is ready only (cannot be modified) or not.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to
            the <seealso cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.Add(`0)">
            <summary>
            Adds an element with the provided key and value to the <seealso cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <seealso cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.Clear">
            <summary>
            Removes all elements from the <seealso cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            Determines whether the <seealso cref="T:System.Collections.IDictionary"/> object contains
            an element with the specified key.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an <seealso cref="T:System.Array"/>,
            starting at a particular <seealso cref="T:System.Array"/> index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an <seealso cref="T:System.Array"/>,
            starting at a particular <seealso cref="T:System.Array"/> index.
            
            Implements the <seealso cref="T:System.Collections.ICollection"/> interface member.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.(Inherited from IEnumerable.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.(Inherited from IEnumerable.)
            
            Implements the <seealso cref="T:System.Collections.IEnumerable"/> interface member.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection">
            <summary>
            Manages a collection of values.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.#ctor(MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary{`0,`1})">
            <summary>
            Class constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.Item(System.Int32)">
            <summary>
            Gets the value item for a given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the count of items currently stored in this collection.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.IsReadOnly">
            <summary>
            Gets whether the collection is ready only (cannot be modified) or not.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to
            the <seealso cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread safe).
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.Add(`1)">
            <summary>
            This method is not suppported and will always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.Remove(`1)">
            <summary>
            This method is not suppported and will always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.Clear">
            <summary>
            This method is not suppported and will always throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.Contains(`1)">
            <summary>
            Determines whether the <seealso cref="T:System.Collections.IDictionary"/> object contains
            an element with the specified value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an <seealso cref="T:System.Array"/>,
            starting at a particular <seealso cref="T:System.Array"/> index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an <seealso cref="T:System.Array"/>,
            starting at a particular <seealso cref="T:System.Array"/> index.
            
            Implements the <seealso cref="T:System.Collections.ICollection"/> interface member.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.(Inherited from IEnumerable.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.(Inherited from IEnumerable.)
            
            Implements the <seealso cref="T:System.Collections.IEnumerable"/> interface member.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2">
            <summary>
            Source: https://github.com/gayaK/Gayak.ObservableDictionary
            
            Implements the <see cref="T:MRULib.MRU.ViewModels.Collections.CollectionBasedDictionary`2"/> class inside the
            <see cref="T:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Class constructor from <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> comparer parameter.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Copy class constructor from <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Copy class constructor from <see cref="T:System.Collections.Generic.IDictionary`2"/> instance and
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> comparer parameter.
            </summary>
            <param name="dictionary"></param>
            <param name="comparer"></param>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.CollectionChanged">
            <summary>
            Implements the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.PropertyChanged">
            <summary>
            Implements the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event raised when a property is changed on a component.
            </summary>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Implements the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event raised when a property is changed on a component.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method is invoked after the collection has changed (insert item, remove item).
            This will fire the <see cref="E:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.CollectionChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Method is invoked when a property is changed to relay that fact via
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface by firing the
            <see cref="E:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.PropertyChanged"/> event.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.InsertItem(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Inserts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object into the current collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.RemoveItem(System.Int32)">
            <summary>
            Removes a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object at the indicated index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.SetItem(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Resets a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> object at the indicated
            index with another <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2.ClearItems">
            <summary>
            Removes all <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects from the current collection.
            </summary>
        </member>
        <member name="T:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2">
            <summary>
            Source: https://github.com/gayaK/Gayak.ObservableDictionary
            
            Implements a <see cref="T:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2"/> class
            which can be used to store and retrieve readonly data items.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.#ctor(MRULib.MRU.ViewModels.Collections.ObservableDictionary{`0,`1})">
            <summary>
            Class constructor.
            </summary>
            <param name="dic"></param>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.CollectionChanged">
            <summary>
            Implements the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            Implements the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event
            for the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            </summary>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.PropertyChanged">
            <summary>
            Implements the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event raised when a property is changed on a component.
            </summary>
        </member>
        <member name="E:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Implements the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event raised when a property is changed on a component.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Dictionary">
            <summary>
            Gets the internal <see cref="T:MRULib.MRU.ViewModels.Collections.ObservableDictionary`2"/> instance.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            Setting this is not supported and will throw <see cref="T:System.NotSupportedException"/>.
            
            Exceptions:
              T:System.ArgumentNullException:
                key is null.
            
              T:System.NotSupportedException:
                The property is set and the System.Collections.IDictionary object is read-only.-or-
                The property is set, key does not exist in the collection, and the System.Collections.IDictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            Setting this is not supported and will throw <see cref="T:System.NotSupportedException"/>.
            
            (implements the <see cref="T:System.Collections.IDictionary"/> interface member).
            
            Exceptions:
              T:System.ArgumentNullException:
                key is null.
            
              T:System.NotSupportedException:
                The property is set and the System.Collections.IDictionary object is read-only.-or-
                The property is set, key does not exist in the collection, and the System.Collections.IDictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Keys">
            <summary>
            Gets an object containing the keys
            of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys
            of the <see cref="T:System.Collections.IDictionary"/> object for the
            <see cref="T:System.Collections.Generic.IDictionary`2"/> member method.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> object containing the keys
            of the <see cref="T:System.Collections.IDictionary"/> object for the
            <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> member method.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys
            of the <see cref="T:System.Collections.IDictionary"/> object for the
            <see cref="T:System.Collections.IDictionary"/> member method.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Values">
            <summary>
            Gets an object containing the elements
            of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the elements
            of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> object containing the elements
            of the <see cref="T:System.Collections.IDictionary"/> object for the
            <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> member method.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the elements
            of the <see cref="T:System.Collections.IDictionary"/> object for the
            <see cref="T:System.Collections.IDictionary"/> member method.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <seealso cref="T:System.Collections.IDictionary"/> has a fixed size.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether objects in the <seealso cref="T:System.Collections.IDictionary"/>
            can only be read or also be edit.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Add(`0,`1)">
            <summary>
            Method is not supported an will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Method is not supported an will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Remove(`0)">
            <summary>
            Method is not supported an will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Method is not supported an will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            (Implements the <seealso cref="T:System.Collections.IDictionary"/> memeber).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.Clear">
            <summary>
            Method is not supported and will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>true if the <seealso cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with
            the specified key; otherwise, false.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <seealso cref="T:System.Collections.IDictionary"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Methode fires the <see cref="E:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.CollectionChanged"/> event with the notification parameter <paramref name="args"/>.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Methode fires the <see cref="E:MRULib.MRU.ViewModels.Collections.ReadonlyObservableDictionary`2.PropertyChanged"/> event with the notification parameter <paramref name="args"/>.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MRULib.MRU.ViewModels.MRUEntryViewModel">
            <summary>
            Implements a viewmodel entry that can be
            used to list all recently used files.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.#ctor(System.String,System.Int32)">
            <summary>
            Parameterized standard constructor
            </summary>
            <param name="pathFileName"></param>
            <param name="isPinned"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.#ctor(System.String,System.DateTime,System.Int32)">
            <summary>
            Parameterized standard constructor
            </summary>
            <param name="pathFileName"></param>
            <param name="lastUpdate"></param>
            <param name="isPinned"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.#ctor(MRULib.MRU.ViewModels.MRUEntryViewModel)">
            <summary>
            Copy Constructor
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.#ctor">
            <summary>
            Standard Constructor
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.File">
            <summary>
            Gets the pathmodel stored in this viewmodel.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.PathFileName">
            <summary>
            Gets the path and file name of the referenced file.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.PathfileNameUri">
            <summary>
            Gets the path and file name of the referenced file in a Uri
            object using the file:/// Uri syntax convention.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.IsPinned">
            <summary>
            Gets the fact whether this item is currently pinned in the list or not.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.LastUpdate">
            <summary>
            Gets the path and file name of the referenced file.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.GroupItem">
            <summary>
            Gets the Group (today, yesterday, etc.) for the current LastUpdate
            with reference to <see cref="P:System.DateTime.Now"/> or IsPinned if IsPinned is true.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUEntryViewModel.DisplayPathFileName">
            <summary>
            Gets a shortend path (with ellipses if necessary) for output in UI components.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.UpdateGroup">
            <summary>
            Method updates the <see cref="P:MRULib.MRU.ViewModels.MRUEntryViewModel.GroupItem"/> property with regard to the
            gap between the current system time and the time stored in
            <see cref="P:MRULib.MRU.ViewModels.MRUEntryViewModel.LastUpdate"/> property.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.SetIsPinned(System.Int32)">
            <summary>
            Sets the <see cref="P:MRULib.MRU.ViewModels.MRUEntryViewModel.IsPinned"/> property to true or false.
            </summary>
            <param name="isPinned"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.SetLastUpdate(System.DateTime)">
            <summary>
            Sets the <see cref="P:MRULib.MRU.ViewModels.MRUEntryViewModel.LastUpdate"/> property to the specified value.
            </summary>
            <param name="lastUpdate"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUEntryViewModel.ToString">
            <summary>
            Standard ToString() method overide implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MRULib.MRU.ViewModels.MRUListViewModel">
            <summary>
            Class hosts a collectionviewmodel and the ability to add/remove and update items
            in the collection. There is also command to invert a IsPinned value for a given
            item's key.
            </summary>
        </member>
        <member name="F:MRULib.MRU.ViewModels.MRUListViewModel.MinValidMruEntryCount">
            <summary>
            Defines the Minimum number of files that should ever be listed in the MRU.
            </summary>
        </member>
        <member name="F:MRULib.MRU.ViewModels.MRUListViewModel.MaxValidMruEntryCount">
            <summary>
            Defines the Maximum number of files that should ever be listed in the MRU.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.#ctor">
            <summary>
            Standard class constructor.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.#ctor(MRULib.MRU.ViewModels.MRUListViewModel)">
            <summary>
            Copy class constructor.
            </summary>
            <param name="copySource"></param>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUListViewModel.MaxMruEntryCount">
            <summary>
            Gets the maximum number of MRU file entries.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUListViewModel.Entries">
            <summary>
            Gets the items collection of MRU File Entries.
            </summary>
        </member>
        <member name="P:MRULib.MRU.ViewModels.MRUListViewModel.ItemIsPinnedChanged">
            <summary>
            Gets a command that will invert the IsPinned property of an
            instance of <seealso cref="T:MRULib.MRU.ViewModels.MRUEntryViewModel"/>.
            
            CommandParameter:
            The key for the value/key pair is expected to be supplied as
            string parameter of the command.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.Equals(System.Object)">
            <summary>
            Determines whether this object equals the other object or not.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.PinUnpinEntry(System.Boolean,MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Sets the pinning entry mode for this filenamepath entry.
            </summary>
            <param name="isPinned"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.PinUnpinEntry(System.Boolean,System.String)">
            <summary>
            Sets the pinning entry mode for this filenamepath entry.
            </summary>
            <param name="isPinned"></param>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.UpdateEntry(System.String)">
            <summary>
            Method either adds an entry if the given path was not available until now
            (with defaults for isPinned=false, LastUpdate = <seealso cref="P:System.DateTime.Now"/>)
            or
            property: LastUpdate = <seealso cref="P:System.DateTime.Now"/> is updated only.
            </summary>
            <param name="filepath"></param>
            <returns>true if update or insert was performd, false otherwise.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.UpdateEntry(System.String,System.Boolean,System.Boolean)">
            <summary>
            Method adds an entry if the given path was not available until now.
            Otherwise, elements properties (IsPinned) are updated only.
            </summary>
            <param name="filepath"></param>
            <param name="isPinned"></param>
            <param name="bUpdate"></param>
            <returns>true if update or insert was performd, false otherwise.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.UpdateEntry(MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Method adds an entry if the given path was not available until now.
            Otherwise, elements properties (IsPinned) are updated only.
            </summary>
            <param name="emp"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.Clear">
            <summary>
            Removes all items in the collection.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.RemoveEntry(System.String)">
            <summary>
            Removes all items that can be identified with this key.
            </summary>
            <param name="key"></param>
            <returns>true if item was succesfully removed, otherwise false.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.RemoveEntry(MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Remove any entry (whether its pinned or not) based on a viewmodel item.
            </summary>
            <param name="mruEntry"></param>
            <returns>true if item was succesfully removed, otherwise false.</returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.RemoveEntry(MRULib.MRU.Enums.GroupType)">
            <summary>
            Removes all items in the collection belongong to this group.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.RemoveEntry(System.DateTime)">
            <summary>
            Removes all items that or older than the given <see cref="T:System.DateTime"/> value.
            Items with IsPinned = True are not removed.
            </summary>
            <param name="removeOlderThanThis"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.RemoveEntryOlderThanThis(MRULib.MRU.Enums.GroupType)">
            <summary>
            <paramref name="group"/> param != IsPinned:
            Removes all items that or older than the <paramref name="group"/>.
            Items with IsPinned = True are not removed.
            
            <paramref name="group"/> param == IsPinned:
            Removes all items that are not pinned.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.RemovePinnedEntries(System.Boolean)">
            <summary>
            Removes all items that are pinned or all items that are not pinned
            depending on the value in <paramref name="isPinned"/>.
            </summary>
            <param name="isPinned">All pinned items are removed, if this is true.
            Otherwise, all items not pinned are removed</param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.ResetMaxMruEntryCount(System.Int32)">
            <summary>
            Sets the maximum number of MRU file entries. The oldest file reference entries are
            removed if there are more entries being added than what is allowed here.
            </summary>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.FindEntry(System.String)">
            <summary>
            Finds an MRU entry by the file reference an returns it or null.
            
            Throws a <seealso cref="T:System.NotSupportedException"/> if parameter is empty or null.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.FindEntries(MRULib.MRU.Enums.GroupType)">
            <summary>
            Finds all items in the collection belongong to this <paramref name="groupType"/>.
            </summary>
            <param name="groupType"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.MovePinnedEntry(MRULib.MRU.Enums.MoveMRUItem,MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Moves a pinned MRU Item up/down in the group of pinned items.
            </summary>
            <param name="direction"></param>
            <param name="param"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.PinUnpinEntry(MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Negates the pin entry state for a given mru list entry.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.PinUnpinEntry(MRULib.MRU.Interfaces.IMRUEntryViewModel,System.Boolean)">
            <summary>
            Pin or unpines an entry depending on the <paramref name="isPinned"/> parameter.
            </summary>
            <param name="val"></param>
            <param name="isPinned"></param>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.UpdateItem(MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            This is invoked when an existing item's peroperties have changed -
            that is the item was already in the list but a sort criteria has changed.
            
            To make that change visible we are removing and inserting the item in the list.
            There does not seem any other way to get that update across(?):
            https://social.msdn.microsoft.com/Forums/vstudio/en-US/cb7c5c62-7ca9-49b5-91a0-379581b1c1aa/listview-sorting-not-updating-when-items-in-the-itemssource-changes?forum=wpf
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.ExchangePinnedSpots(MRULib.MRU.Interfaces.IMRUEntryViewModel,MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Exchange the spots of pinned items <paramref name="item1"/>
            and <paramref name="item2"/> via exchange of IsPinned values
            and direct add/remove in viewmodel collection.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU.ViewModels.MRUListViewModel.AddEntry(System.String,MRULib.MRU.Interfaces.IMRUEntryViewModel)">
            <summary>
            Adds a new entry into the list of MRU entries and
            ensures the correct pin counter states.
            </summary>
            <param name="pathFile"></param>
            <param name="emp"></param>
        </member>
        <member name="T:MRULib.MRU_Service">
            <summary>
            Provides methodes for generating MRU List View items via defined interfaces
            rather than using classes known ourside of this library.
            </summary>
        </member>
        <member name="M:MRULib.MRU_Service.Create_List">
            <summary>
            Implements a method for creating a listviewmodel that drives the backend of the MRU List.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MRULib.MRU_Service.Create_Entry(System.String,System.Boolean)">
            <summary>
            Provides a parameterized standard construction of entry viewmodel item.
            </summary>
            <param name="pathFileName"></param>
            <param name="isPinned"></param>
        </member>
        <member name="M:MRULib.MRU_Service.Create_Entry(System.String,System.DateTime,System.Boolean)">
            <summary>
            Provides a parameterized standard construction of entry viewmodel item.
            </summary>
            <param name="pathFileName"></param>
            <param name="isPinned"></param>
            <param name="lastUpdate"></param>
        </member>
        <member name="T:MRULib.Themes.ResourceKeys">
            <summary>
            Resource key management class to keep track of all resources
            that can be re-styled in applications that make use of the implemented controls.
            </summary>
        </member>
        <member name="F:MRULib.Themes.ResourceKeys.ControlAccentColorKey">
            <summary>
            Accent Color Key - This Color key is used to accent elements in the UI
            (e.g.: Color of Activated Normal Window Frame, ResizeGrip, Focus or MouseOver input elements)
            </summary>
        </member>
        <member name="F:MRULib.Themes.ResourceKeys.ControlAccentBrushKey">
            <summary>
            Accent Brush Key - This Brush key is used to accent elements in the UI
            (e.g.: Color of Activated Normal Window Frame, ResizeGrip, Focus or MouseOver input elements)
            </summary>
        </member>
        <member name="F:MRULib.Themes.ResourceKeys.Pin_Foreground">
            <summary>
            Foreground Brush key of the pin shown in the listview.
            </summary>
        </member>
        <member name="F:MRULib.Themes.ResourceKeys.Pin_ForegroundBorder">
            <summary>
            Foreground Border Brush key of the pin shown in the listview.
            This key outlines the pin figure and can be used to highlight the outline only -
            or use a different color on the outline than on the inner foreground body pixels.
            </summary>
        </member>
        <member name="F:MRULib.Themes.ResourceKeys.Pin_NoCheckMarkOpacitiy">
            <summary>
            Opacity value (0.0 - 1.0) of the checkmark pin when it is shown on mouseover.
            </summary>
        </member>
        <member name="F:MRULib.Themes.ResourceKeys.Hyperlink_Foreground">
            <summary>
            Opacity value (0.0 - 1.0) of the checkmark pin when it is shown on mouseover.
            </summary>
        </member>
        <member name="T:MRULib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MRULib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MRULib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
